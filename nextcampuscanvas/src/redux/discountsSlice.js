import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

//hooks
import axios from 'axios';

//Endpoints
import endPoints from '@services/api';

import { hashPassword } from '@server/services/passEncript';

//CLARIFICATIONS:
//Cannot useAxios, since this ain´t a react component

const INITIAL_STATE = {
  discounts: [],
  loading: false,
  error: '',
};

//This is an async action
export const getDiscounts = createAsyncThunk(
  //Action types
  'discounts/getDiscounts',
  async () => {
    try {
      const respuesta = await axios({
        method: 'get',
        //This will get all discounts data, either available or not
        url: endPoints.discounts.index,
        headers: {
          accept: '*/*',
          'Content-Type': 'application/json',
          app_secret_key: await hashPassword(
            process.env.NEXT_PUBLIC_MAIN_NEXT_WEB_APP_SECRET_KEY
          ),
          needed_info: 'all_discounts',
        },
      });
      const data = respuesta.data.body;
      return data;
    } catch (error) {
      console.log(error);
      return 'Error al traer descuentos' + error.message;
    }
  }
);

export const discountsReducer = createSlice({
  name: 'discounts',
  initialState: INITIAL_STATE,
  //These reducers will handle the global state of the slice. They can´t be async.
  reducers: {},
  //Used to handle the state according to the promise status of the createAsyncThunk function.
  extraReducers: (builder) => {
    //We can add a case for the action type generated by createAsyncThunk
    builder
      //In this case, getDiscounts will generate 3 action types: getDiscounts/pending, getDiscounts/fulfilled, getDiscounts/rejected. We can add a case for each one of them.
      .addCase(getDiscounts.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(getDiscounts.fulfilled, (state, action) => {
        state.loading = false;
        state.discounts = action.payload;
      })
      .addCase(getDiscounts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

export const selectDiscount = (state) => state.discounts;

export default discountsReducer.reducer;
