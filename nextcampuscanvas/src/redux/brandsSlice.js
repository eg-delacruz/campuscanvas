import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

//hooks
import axios from 'axios';

//Endpoints
import endPoints from '@services/api';

import { hashPassword } from '@server/services/passEncript';

const INITIAL_STATE = {
  brands: [],
  loading: false,
  error: '',
};

//This is an async action
export const getBrands = createAsyncThunk(
  //Action types
  'brands/getBrands',
  async () => {
    try {
      const respuesta = await axios({
        method: 'get',
        url: endPoints.discounts.brands,
        headers: {
          accept: '*/*',
          'Content-Type': 'application/json',
          app_secret_key: await hashPassword(
            process.env.NEXT_PUBLIC_MAIN_NEXT_WEB_APP_SECRET_KEY
          ),
        },
      });
      console.log('respuesta', respuesta.data.body);
      const data = respuesta.data.body;
      return data;
    } catch (error) {
      console.log(error);
      return 'Error al traer marcas' + error.message;
    }
  }
);

export const brandsReducer = createSlice({
  name: 'brands',
  initialState: INITIAL_STATE,
  //These reducers will handle the global state of the slice. They canÂ´t be async.
  reducers: {},
  //Used to handle the state according to the promise status of the createAsyncThunk function.
  extraReducers: (builder) => {
    //We can add a case for the action type generated by createAsyncThunk
    builder
      //In this case, getBrands will generate 3 action types: getBrands/pending, getBrands/fulfilled, getBrands/rejected. We can add a case for each one of them.
      .addCase(getBrands.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(getBrands.fulfilled, (state, action) => {
        state.loading = false;
        state.brands = action.payload;
      })
      .addCase(getBrands.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

export const selectBrand = (state) => state.brands;

export default brandsReducer.reducer;
