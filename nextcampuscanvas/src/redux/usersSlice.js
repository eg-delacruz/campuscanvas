import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

//Endpoints
import endPoints from '@services/api';

const INITIAL_STATE = {
  user: null,
  loading: false,
  error: '',
};

//This is an async action
export const getUser = createAsyncThunk(
  'user/getUser',
  //First parameter is what we send from the component where we use the action creator. In this case, we are sending the id of the job.
  async (id) => {
    try {
      const respuesta = await fetch(endPoints.user.getUser(id), {
        method: 'GET',
        headers: {
          accept: '*/*',
          'Content-Type': 'application/json',
          app_secret_key: process.env.NEXT_PUBLIC_MAIN_NEXT_WEB_APP_SECRET_KEY,
        },
      });
      const data = await respuesta.json();
      return data.body;
    } catch (error) {
      console.log(error);
      return 'Error al traer usuario' + error.message;
    }
  }
);

export const usersReducer = createSlice({
  name: 'user',
  initialState: INITIAL_STATE,
  //These reducers will handle the global state of the slice. They canÂ´t be async.
  reducers: {},
  //Used to handle the state according to the promise status of the createAsyncThunk function.
  extraReducers: (builder) => {
    //We can add a case for the action type generated by createAsyncThunk
    builder
      //In this case, getUser will generate 3 action types: getUser/pending, getUser/fulfilled, getUser/rejected. We can add a case for each one of them.
      .addCase(getUser.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(getUser.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload;
      })
      .addCase(getUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

export const selectUser = (state) => state.user;

export default usersReducer.reducer;
