import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { JOBS } from '@databases/jobsDatabase';

const INITIAL_STATE = {
  jobs: [],
  loading: false,
  error: '',
};

//createAsyncThunk is a function that accepts a string for the generated action types and a function called the payload creator, which can be async. That function is the one that can receive arguments in case we need them. The function MUST return a promise. The promise can be resolved with the data we want to use or rejected with an error message. The function will return an object with the action types generated by createAsyncThunk. We can use those action types to add extra reducers to the slice.
export const getJobs = createAsyncThunk(
  'jobs/getJobs',
  //First parameter is what we send from the component where we use the action creator. In this case, we are sending the id of the job.
  async (placeholder_id) => {
    try {
      // const response = await axios.get(JOBS_URL);
      // return response.data;
      //Create a fake async call to the database with async/await
      return new Promise((resolve, reject) => {
        //Uncomment to simulate an error
        // setTimeout(() => {
        //   reject(
        //     new Error(
        //       'Ha ocurrido un problema al cargar los puestos de trabajo. Inténtalo más tarde.'
        //     )
        //   );
        // }, 2000);
        setTimeout(() => {
          if (JOBS.length === 0) {
            resolve('no_jobs');
          } else {
            resolve(JOBS);
          }
        }, 800);
      });
    } catch (error) {
      console.log(error);
      return error.message;
    }
  }
);

export const jobsSlice = createSlice({
  name: 'jobs',
  initialState: INITIAL_STATE,
  reducers: {},
  //Used to handle the state according to the promise status of the createAsyncThunk function.
  extraReducers: (builder) => {
    //We can add a case for the action type generated by createAsyncThunk
    builder
      //In this case, getJobs will generate 3 action types: getJobs/pending, getJobs/fulfilled, getJobs/rejected. We can add a case for each one of them.
      .addCase(getJobs.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(getJobs.fulfilled, (state, action) => {
        state.loading = false;
        state.jobs = action.payload;
      })
      .addCase(getJobs.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

//We export async action creators like this
//export const { getJobs } = jobsSlice.actions;

export const selectJobs = (state) => state.jobs;

export default jobsSlice.reducer;
