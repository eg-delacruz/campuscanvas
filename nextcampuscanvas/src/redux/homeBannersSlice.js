import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

//Endpoints
import endPoints from '@services/api';

//Services
import axiosFetcher from '@services/axiosFetcher';

const INITIAL_STATE = {
  home_banners: [],
  loading: false,
  error: '',
};

//This is an async action
export const getHomeBannersInfo = createAsyncThunk(
  //Action types
  'home_banners/getHomeBannersInfo',
  async () => {
    const response = await axiosFetcher({
      url: endPoints.admin.discounts.getHomeSliderBannersInfo,
      method: 'get',
    });

    if (response.error) {
      console.log(response.error);
      return 'Error al traer información de home banners ' + response.error;
    }

    return response.body;
  }
);

export const homeBannersReducer = createSlice({
  name: 'home_banners',
  initialState: INITIAL_STATE,
  //These reducers will handle the global state of the slice. They can´t be async.
  reducers: {},
  //Used to handle the state according to the promise status of the createAsyncThunk function.
  extraReducers: (builder) => {
    //We can add a case for the action type generated by createAsyncThunk
    builder
      //In this case, getHomeBannersInfo will generate 3 action types: getHomeBannersInfo/pending, getHomeBannersInfo/fulfilled, getHomeBannersInfo/rejected. We can add a case for each one of them.
      .addCase(getHomeBannersInfo.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(getHomeBannersInfo.fulfilled, (state, action) => {
        state.loading = false;
        state.home_banners = action.payload;
      })
      .addCase(getHomeBannersInfo.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

export const selectHomeBanner = (state) => state.home_banners;

export default homeBannersReducer.reducer;
